using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcurl"], :libcurl),
    ExecutableProduct(prefix, "curl", :curl),
]

# Install BinaryBuilder dependencies
dependencies = [
    "https://github.com/bicycle1885/ZlibBuilder/releases/download/v1.0.2/build_Zlib.v1.2.11.jl",
    "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.11/build_MbedTLS.v1.0.0.jl"
]

for url in dependencies
    build_file = joinpath(@__DIR__, basename(url))
    if !isfile(build_file)
        download(url, build_file)
    end
end

# Execute the build scripts for the dependencies in an isolated module to avoid overwriting
# any variables/constants here
for url in dependencies
    build_file = joinpath(@__DIR__, basename(url))
    m = @eval module $(gensym()); include($build_file); end
    append!(products, m.products)
end

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaWeb/LibCURLBuilder/releases/download/v0.2.3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/LibCURL.v7.61.0.aarch64-linux-gnu.tar.gz", "c08d035c082b8613de36356fd4e9908a9d4a96bcff93af6a4d1cc5966daf8b03"),
    Linux(:aarch64, :musl) => ("$bin_prefix/LibCURL.v7.61.0.aarch64-linux-musl.tar.gz", "3d414cc7cd98c0cf67be0a8fd944ed98f990f06333b5ce560f1163b6917b18d6"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/LibCURL.v7.61.0.arm-linux-gnueabihf.tar.gz", "b1f7fa52c26139bd802a642c6fb805365e299477748fa0568da5072db640d9e6"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/LibCURL.v7.61.0.arm-linux-musleabihf.tar.gz", "21fe8c6915cceb623c446be214b824496817042b5c0b531a413aeb362febca3b"),
    Linux(:i686, :glibc) => ("$bin_prefix/LibCURL.v7.61.0.i686-linux-gnu.tar.gz", "644ef1b2646b8065dc746bbb01264329601cefd2d5dd3e8c0e2d53032102a782"),
    Linux(:i686, :musl) => ("$bin_prefix/LibCURL.v7.61.0.i686-linux-musl.tar.gz", "891a820821f12e735afdaf3b023b0218e9affb311b9c28dc616fc45707c4aefb"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/LibCURL.v7.61.0.powerpc64le-linux-gnu.tar.gz", "4bdec3956a482c6669b6889007364af7b04da4ce00546935721bdc9b29a3ab0e"),
    MacOS(:x86_64) => ("$bin_prefix/LibCURL.v7.61.0.x86_64-apple-darwin14.tar.gz", "67e94833bb00690e8250cd81d47e7e4e8e8e8b752277f15ea477ea782f892ac0"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/LibCURL.v7.61.0.x86_64-linux-gnu.tar.gz", "3e4e0d5b65163ad05f8e14d1cc81f0d2a22165528cde3ac7e5dc3d72ea155b01"),
    Linux(:x86_64, :musl) => ("$bin_prefix/LibCURL.v7.61.0.x86_64-linux-musl.tar.gz", "0ddae99ad88f0ecec40cb77878fcde7e596adb3bfe631feb9c748197f8306f52"),
    FreeBSD(:x86_64) => ("$bin_prefix/LibCURL.v7.61.0.x86_64-unknown-freebsd11.1.tar.gz", "7866bacaf419af4f89f29f0bf7d10dee31b3f935881de7cab118d24eec2bd2f3"),
    Windows(:x86_64) => ("$bin_prefix/LibCURL.v7.61.0.x86_64-w64-mingw32.tar.gz", "985b52dc74d214f6024890e2497d1bbe5852ed71cb966e864fea8d2da8614c9c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
